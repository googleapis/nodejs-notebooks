// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as notebookserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.NotebookServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = notebookserviceModule.v1.NotebookServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = notebookserviceModule.v1.NotebookServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = notebookserviceModule.v1.NotebookServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new notebookserviceModule.v1.NotebookServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new notebookserviceModule.v1.NotebookServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.notebookServiceStub, undefined);
        await client.initialize();
        assert(client.notebookServiceStub);
    });

    it('has close method', () => {
        const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getInstance', () => {
        it('invokes getInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance());
            client.innerApiCalls.getInstance = stubSimpleCall(expectedResponse);
            const [response] = await client.getInstance(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance());
            client.innerApiCalls.getInstance = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInstance(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IInstance|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInstance with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInstance = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInstance(request), expectedError);
            assert((client.innerApiCalls.getInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('isInstanceUpgradeable', () => {
        it('invokes isInstanceUpgradeable without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.IsInstanceUpgradeableRequest());
            request.notebookInstance = '';
            const expectedHeaderRequestParams = "notebook_instance=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.IsInstanceUpgradeableResponse());
            client.innerApiCalls.isInstanceUpgradeable = stubSimpleCall(expectedResponse);
            const [response] = await client.isInstanceUpgradeable(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.isInstanceUpgradeable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes isInstanceUpgradeable without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.IsInstanceUpgradeableRequest());
            request.notebookInstance = '';
            const expectedHeaderRequestParams = "notebook_instance=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.IsInstanceUpgradeableResponse());
            client.innerApiCalls.isInstanceUpgradeable = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.isInstanceUpgradeable(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.isInstanceUpgradeable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes isInstanceUpgradeable with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.IsInstanceUpgradeableRequest());
            request.notebookInstance = '';
            const expectedHeaderRequestParams = "notebook_instance=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.isInstanceUpgradeable = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.isInstanceUpgradeable(request), expectedError);
            assert((client.innerApiCalls.isInstanceUpgradeable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getInstanceHealth', () => {
        it('invokes getInstanceHealth without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceHealthRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceHealthResponse());
            client.innerApiCalls.getInstanceHealth = stubSimpleCall(expectedResponse);
            const [response] = await client.getInstanceHealth(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstanceHealth as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInstanceHealth without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceHealthRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceHealthResponse());
            client.innerApiCalls.getInstanceHealth = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInstanceHealth(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IGetInstanceHealthResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInstanceHealth as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInstanceHealth with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetInstanceHealthRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInstanceHealth = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInstanceHealth(request), expectedError);
            assert((client.innerApiCalls.getInstanceHealth as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getEnvironment', () => {
        it('invokes getEnvironment without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetEnvironmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment());
            client.innerApiCalls.getEnvironment = stubSimpleCall(expectedResponse);
            const [response] = await client.getEnvironment(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getEnvironment without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetEnvironmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment());
            client.innerApiCalls.getEnvironment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getEnvironment(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IEnvironment|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getEnvironment with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetEnvironmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getEnvironment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getEnvironment(request), expectedError);
            assert((client.innerApiCalls.getEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getSchedule', () => {
        it('invokes getSchedule without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule());
            client.innerApiCalls.getSchedule = stubSimpleCall(expectedResponse);
            const [response] = await client.getSchedule(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getSchedule without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule());
            client.innerApiCalls.getSchedule = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSchedule(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.ISchedule|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getSchedule with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getSchedule = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSchedule(request), expectedError);
            assert((client.innerApiCalls.getSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getExecution', () => {
        it('invokes getExecution without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetExecutionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution());
            client.innerApiCalls.getExecution = stubSimpleCall(expectedResponse);
            const [response] = await client.getExecution(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getExecution without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetExecutionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution());
            client.innerApiCalls.getExecution = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getExecution(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IExecution|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getExecution with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.GetExecutionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getExecution = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getExecution(request), expectedError);
            assert((client.innerApiCalls.getExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createInstance', () => {
        it('invokes createInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createInstance(request), expectedError);
            assert((client.innerApiCalls.createInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('registerInstance', () => {
        it('invokes registerInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RegisterInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.registerInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.registerInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.registerInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes registerInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RegisterInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.registerInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.registerInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.registerInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes registerInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RegisterInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.registerInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.registerInstance(request), expectedError);
            assert((client.innerApiCalls.registerInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes registerInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RegisterInstanceRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.registerInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.registerInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.registerInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRegisterInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRegisterInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRegisterInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRegisterInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('setInstanceAccelerator', () => {
        it('invokes setInstanceAccelerator without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceAcceleratorRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInstanceAccelerator = stubLongRunningCall(expectedResponse);
            const [operation] = await client.setInstanceAccelerator(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInstanceAccelerator as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInstanceAccelerator without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceAcceleratorRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInstanceAccelerator = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setInstanceAccelerator(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInstanceAccelerator as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setInstanceAccelerator with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceAcceleratorRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInstanceAccelerator = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.setInstanceAccelerator(request), expectedError);
            assert((client.innerApiCalls.setInstanceAccelerator as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInstanceAccelerator with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceAcceleratorRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInstanceAccelerator = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.setInstanceAccelerator(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.setInstanceAccelerator as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSetInstanceAcceleratorProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSetInstanceAcceleratorProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSetInstanceAcceleratorProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSetInstanceAcceleratorProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('setInstanceMachineType', () => {
        it('invokes setInstanceMachineType without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceMachineTypeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInstanceMachineType = stubLongRunningCall(expectedResponse);
            const [operation] = await client.setInstanceMachineType(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInstanceMachineType as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInstanceMachineType without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceMachineTypeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInstanceMachineType = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setInstanceMachineType(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInstanceMachineType as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setInstanceMachineType with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceMachineTypeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInstanceMachineType = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.setInstanceMachineType(request), expectedError);
            assert((client.innerApiCalls.setInstanceMachineType as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInstanceMachineType with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceMachineTypeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInstanceMachineType = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.setInstanceMachineType(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.setInstanceMachineType as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSetInstanceMachineTypeProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSetInstanceMachineTypeProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSetInstanceMachineTypeProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSetInstanceMachineTypeProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateInstanceConfig', () => {
        it('invokes updateInstanceConfig without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateInstanceConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateInstanceConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateInstanceConfig without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateInstanceConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateInstanceConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateInstanceConfig with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateInstanceConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateInstanceConfig(request), expectedError);
            assert((client.innerApiCalls.updateInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateInstanceConfig with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateInstanceConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateInstanceConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateInstanceConfigProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateInstanceConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateInstanceConfigProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateInstanceConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateShieldedInstanceConfig', () => {
        it('invokes updateShieldedInstanceConfig without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateShieldedInstanceConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateShieldedInstanceConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateShieldedInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateShieldedInstanceConfig without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateShieldedInstanceConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateShieldedInstanceConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateShieldedInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateShieldedInstanceConfig with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateShieldedInstanceConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateShieldedInstanceConfig(request), expectedError);
            assert((client.innerApiCalls.updateShieldedInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateShieldedInstanceConfig with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateShieldedInstanceConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateShieldedInstanceConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateShieldedInstanceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateShieldedInstanceConfigProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateShieldedInstanceConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateShieldedInstanceConfigProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateShieldedInstanceConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('setInstanceLabels', () => {
        it('invokes setInstanceLabels without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceLabelsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInstanceLabels = stubLongRunningCall(expectedResponse);
            const [operation] = await client.setInstanceLabels(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInstanceLabels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInstanceLabels without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceLabelsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInstanceLabels = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setInstanceLabels(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInstanceLabels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setInstanceLabels with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceLabelsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInstanceLabels = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.setInstanceLabels(request), expectedError);
            assert((client.innerApiCalls.setInstanceLabels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInstanceLabels with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.SetInstanceLabelsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInstanceLabels = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.setInstanceLabels(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.setInstanceLabels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSetInstanceLabelsProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSetInstanceLabelsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSetInstanceLabelsProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSetInstanceLabelsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteInstance', () => {
        it('invokes deleteInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteInstance(request), expectedError);
            assert((client.innerApiCalls.deleteInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('startInstance', () => {
        it('invokes startInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StartInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.startInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.startInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StartInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.startInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes startInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StartInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.startInstance(request), expectedError);
            assert((client.innerApiCalls.startInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StartInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.startInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.startInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkStartInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkStartInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkStartInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkStartInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('stopInstance', () => {
        it('invokes stopInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StopInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.stopInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.stopInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.stopInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes stopInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StopInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.stopInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.stopInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.stopInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes stopInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StopInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.stopInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.stopInstance(request), expectedError);
            assert((client.innerApiCalls.stopInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes stopInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.StopInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.stopInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.stopInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.stopInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkStopInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkStopInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkStopInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkStopInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('resetInstance', () => {
        it('invokes resetInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.resetInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.resetInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes resetInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.resetInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.resetInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes resetInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.resetInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.resetInstance(request), expectedError);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes resetInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ResetInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.resetInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.resetInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.resetInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkResetInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkResetInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkResetInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkResetInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('reportInstanceInfo', () => {
        it('invokes reportInstanceInfo without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ReportInstanceInfoRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.reportInstanceInfo = stubLongRunningCall(expectedResponse);
            const [operation] = await client.reportInstanceInfo(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.reportInstanceInfo as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes reportInstanceInfo without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ReportInstanceInfoRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.reportInstanceInfo = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.reportInstanceInfo(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.reportInstanceInfo as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes reportInstanceInfo with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ReportInstanceInfoRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.reportInstanceInfo = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.reportInstanceInfo(request), expectedError);
            assert((client.innerApiCalls.reportInstanceInfo as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes reportInstanceInfo with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ReportInstanceInfoRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.reportInstanceInfo = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.reportInstanceInfo(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.reportInstanceInfo as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkReportInstanceInfoProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkReportInstanceInfoProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkReportInstanceInfoProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkReportInstanceInfoProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('upgradeInstance', () => {
        it('invokes upgradeInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.upgradeInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.upgradeInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.upgradeInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes upgradeInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.upgradeInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.upgradeInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.upgradeInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes upgradeInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.upgradeInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.upgradeInstance(request), expectedError);
            assert((client.innerApiCalls.upgradeInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes upgradeInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.upgradeInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.upgradeInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.upgradeInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpgradeInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpgradeInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpgradeInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpgradeInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('rollbackInstance', () => {
        it('invokes rollbackInstance without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RollbackInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.rollbackInstance = stubLongRunningCall(expectedResponse);
            const [operation] = await client.rollbackInstance(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rollbackInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes rollbackInstance without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RollbackInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.rollbackInstance = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.rollbackInstance(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rollbackInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes rollbackInstance with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RollbackInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.rollbackInstance = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.rollbackInstance(request), expectedError);
            assert((client.innerApiCalls.rollbackInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes rollbackInstance with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.RollbackInstanceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.rollbackInstance = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.rollbackInstance(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.rollbackInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRollbackInstanceProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRollbackInstanceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRollbackInstanceProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRollbackInstanceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('upgradeInstanceInternal', () => {
        it('invokes upgradeInstanceInternal without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceInternalRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.upgradeInstanceInternal = stubLongRunningCall(expectedResponse);
            const [operation] = await client.upgradeInstanceInternal(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.upgradeInstanceInternal as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes upgradeInstanceInternal without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceInternalRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.upgradeInstanceInternal = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.upgradeInstanceInternal(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.upgradeInstanceInternal as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes upgradeInstanceInternal with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceInternalRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.upgradeInstanceInternal = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.upgradeInstanceInternal(request), expectedError);
            assert((client.innerApiCalls.upgradeInstanceInternal as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes upgradeInstanceInternal with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.UpgradeInstanceInternalRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.upgradeInstanceInternal = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.upgradeInstanceInternal(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.upgradeInstanceInternal as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpgradeInstanceInternalProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpgradeInstanceInternalProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpgradeInstanceInternalProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpgradeInstanceInternalProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createEnvironment', () => {
        it('invokes createEnvironment without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateEnvironmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createEnvironment = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createEnvironment(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createEnvironment without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateEnvironmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createEnvironment = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createEnvironment(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IEnvironment, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IEnvironment, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createEnvironment with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateEnvironmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createEnvironment = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createEnvironment(request), expectedError);
            assert((client.innerApiCalls.createEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createEnvironment with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateEnvironmentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createEnvironment = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createEnvironment(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateEnvironmentProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateEnvironmentProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateEnvironmentProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateEnvironmentProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteEnvironment', () => {
        it('invokes deleteEnvironment without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteEnvironmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteEnvironment = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteEnvironment(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteEnvironment without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteEnvironmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteEnvironment = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteEnvironment(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteEnvironment with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteEnvironmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteEnvironment = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteEnvironment(request), expectedError);
            assert((client.innerApiCalls.deleteEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteEnvironment with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteEnvironmentRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteEnvironment = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteEnvironment(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteEnvironment as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteEnvironmentProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteEnvironmentProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteEnvironmentProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteEnvironmentProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteSchedule', () => {
        it('invokes deleteSchedule without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteSchedule = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteSchedule(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteSchedule without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteSchedule = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSchedule(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteSchedule with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSchedule = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteSchedule(request), expectedError);
            assert((client.innerApiCalls.deleteSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteSchedule with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSchedule = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteSchedule(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteScheduleProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteScheduleProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteScheduleProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteScheduleProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createSchedule', () => {
        it('invokes createSchedule without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateScheduleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createSchedule = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createSchedule(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createSchedule without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateScheduleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createSchedule = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSchedule(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createSchedule with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateScheduleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createSchedule = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createSchedule(request), expectedError);
            assert((client.innerApiCalls.createSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createSchedule with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateScheduleRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createSchedule = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createSchedule(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateScheduleProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateScheduleProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateScheduleProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateScheduleProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('triggerSchedule', () => {
        it('invokes triggerSchedule without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.TriggerScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.triggerSchedule = stubLongRunningCall(expectedResponse);
            const [operation] = await client.triggerSchedule(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.triggerSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes triggerSchedule without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.TriggerScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.triggerSchedule = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.triggerSchedule(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.triggerSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes triggerSchedule with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.TriggerScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.triggerSchedule = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.triggerSchedule(request), expectedError);
            assert((client.innerApiCalls.triggerSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes triggerSchedule with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.TriggerScheduleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.triggerSchedule = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.triggerSchedule(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.triggerSchedule as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkTriggerScheduleProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkTriggerScheduleProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkTriggerScheduleProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkTriggerScheduleProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteExecution', () => {
        it('invokes deleteExecution without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteExecutionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteExecution = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteExecution(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteExecution without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteExecutionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteExecution = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteExecution(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteExecution with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteExecutionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteExecution = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteExecution(request), expectedError);
            assert((client.innerApiCalls.deleteExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteExecution with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.DeleteExecutionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteExecution = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteExecution(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteExecutionProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteExecutionProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteExecutionProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteExecutionProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createExecution', () => {
        it('invokes createExecution without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateExecutionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createExecution = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createExecution(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createExecution without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateExecutionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createExecution = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createExecution(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.notebooks.v1.IExecution, protos.google.cloud.notebooks.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.notebooks.v1.IExecution, protos.google.cloud.notebooks.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createExecution with call error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateExecutionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createExecution = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createExecution(request), expectedError);
            assert((client.innerApiCalls.createExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createExecution with LRO error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.CreateExecutionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createExecution = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createExecution(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createExecution as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateExecutionProgress without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateExecutionProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateExecutionProgress with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateExecutionProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listInstances', () => {
        it('invokes listInstances without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
            ];
            client.innerApiCalls.listInstances = stubSimpleCall(expectedResponse);
            const [response] = await client.listInstances(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInstances without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
            ];
            client.innerApiCalls.listInstances = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listInstances(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IInstance[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listInstances with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listInstances = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listInstances(request), expectedError);
            assert((client.innerApiCalls.listInstances as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listInstancesStream without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
            ];
            client.descriptors.page.listInstances.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listInstancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Instance[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Instance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listInstances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstances, request));
            assert.strictEqual(
                (client.descriptors.page.listInstances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listInstancesStream with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listInstances.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listInstancesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Instance[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Instance) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listInstances.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listInstances, request));
            assert.strictEqual(
                (client.descriptors.page.listInstances.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInstances without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Instance()),
            ];
            client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.notebooks.v1.IInstance[] = [];
            const iterable = client.listInstancesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listInstances with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListInstancesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listInstances.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listInstancesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.notebooks.v1.IInstance[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listInstances.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listEnvironments', () => {
        it('invokes listEnvironments without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListEnvironmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
            ];
            client.innerApiCalls.listEnvironments = stubSimpleCall(expectedResponse);
            const [response] = await client.listEnvironments(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listEnvironments as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listEnvironments without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListEnvironmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
            ];
            client.innerApiCalls.listEnvironments = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listEnvironments(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IEnvironment[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listEnvironments as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listEnvironments with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListEnvironmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listEnvironments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listEnvironments(request), expectedError);
            assert((client.innerApiCalls.listEnvironments as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listEnvironmentsStream without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListEnvironmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
            ];
            client.descriptors.page.listEnvironments.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listEnvironmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Environment[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Environment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listEnvironments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEnvironments, request));
            assert.strictEqual(
                (client.descriptors.page.listEnvironments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listEnvironmentsStream with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListEnvironmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listEnvironments.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listEnvironmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Environment[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Environment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listEnvironments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEnvironments, request));
            assert.strictEqual(
                (client.descriptors.page.listEnvironments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listEnvironments without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListEnvironmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Environment()),
            ];
            client.descriptors.page.listEnvironments.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.notebooks.v1.IEnvironment[] = [];
            const iterable = client.listEnvironmentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listEnvironments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listEnvironments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listEnvironments with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListEnvironmentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listEnvironments.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listEnvironmentsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.notebooks.v1.IEnvironment[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listEnvironments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listEnvironments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listSchedules', () => {
        it('invokes listSchedules without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListSchedulesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
            ];
            client.innerApiCalls.listSchedules = stubSimpleCall(expectedResponse);
            const [response] = await client.listSchedules(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSchedules as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSchedules without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListSchedulesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
            ];
            client.innerApiCalls.listSchedules = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSchedules(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.ISchedule[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSchedules as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listSchedules with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListSchedulesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listSchedules = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSchedules(request), expectedError);
            assert((client.innerApiCalls.listSchedules as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSchedulesStream without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListSchedulesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
            ];
            client.descriptors.page.listSchedules.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSchedulesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Schedule[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Schedule) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSchedules.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSchedules, request));
            assert.strictEqual(
                (client.descriptors.page.listSchedules.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listSchedulesStream with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListSchedulesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listSchedules.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSchedulesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Schedule[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Schedule) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSchedules.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSchedules, request));
            assert.strictEqual(
                (client.descriptors.page.listSchedules.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSchedules without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListSchedulesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Schedule()),
            ];
            client.descriptors.page.listSchedules.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.notebooks.v1.ISchedule[] = [];
            const iterable = client.listSchedulesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSchedules.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSchedules.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSchedules with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListSchedulesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listSchedules.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSchedulesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.notebooks.v1.ISchedule[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSchedules.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSchedules.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listExecutions', () => {
        it('invokes listExecutions without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListExecutionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
            ];
            client.innerApiCalls.listExecutions = stubSimpleCall(expectedResponse);
            const [response] = await client.listExecutions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listExecutions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listExecutions without error using callback', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListExecutionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
            ];
            client.innerApiCalls.listExecutions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listExecutions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.notebooks.v1.IExecution[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listExecutions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listExecutions with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListExecutionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listExecutions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listExecutions(request), expectedError);
            assert((client.innerApiCalls.listExecutions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listExecutionsStream without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListExecutionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
            ];
            client.descriptors.page.listExecutions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listExecutionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Execution[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Execution) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listExecutions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listExecutions, request));
            assert.strictEqual(
                (client.descriptors.page.listExecutions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listExecutionsStream with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListExecutionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listExecutions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listExecutionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.notebooks.v1.Execution[] = [];
                stream.on('data', (response: protos.google.cloud.notebooks.v1.Execution) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listExecutions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listExecutions, request));
            assert.strictEqual(
                (client.descriptors.page.listExecutions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listExecutions without error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListExecutionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
              generateSampleMessage(new protos.google.cloud.notebooks.v1.Execution()),
            ];
            client.descriptors.page.listExecutions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.notebooks.v1.IExecution[] = [];
            const iterable = client.listExecutionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listExecutions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listExecutions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listExecutions with error', async () => {
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.notebooks.v1.ListExecutionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listExecutions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listExecutionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.notebooks.v1.IExecution[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listExecutions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listExecutions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('environment', () => {
            const fakePath = "/rendered/path/environment";
            const expectedParameters = {
                project: "projectValue",
                environment: "environmentValue",
            };
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.environmentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.environmentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('environmentPath', () => {
                const result = client.environmentPath("projectValue", "environmentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.environmentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEnvironmentName', () => {
                const result = client.matchProjectFromEnvironmentName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.environmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEnvironmentFromEnvironmentName', () => {
                const result = client.matchEnvironmentFromEnvironmentName(fakePath);
                assert.strictEqual(result, "environmentValue");
                assert((client.pathTemplates.environmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('execution', () => {
            const fakePath = "/rendered/path/execution";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                execution: "executionValue",
            };
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.executionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.executionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('executionPath', () => {
                const result = client.executionPath("projectValue", "locationValue", "executionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.executionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromExecutionName', () => {
                const result = client.matchProjectFromExecutionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.executionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromExecutionName', () => {
                const result = client.matchLocationFromExecutionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.executionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExecutionFromExecutionName', () => {
                const result = client.matchExecutionFromExecutionName(fakePath);
                assert.strictEqual(result, "executionValue");
                assert((client.pathTemplates.executionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('instance', () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                instance: "instanceValue",
            };
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('runtime', () => {
            const fakePath = "/rendered/path/runtime";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                runtime: "runtimeValue",
            };
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.runtimePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.runtimePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('runtimePath', () => {
                const result = client.runtimePath("projectValue", "locationValue", "runtimeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.runtimePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRuntimeName', () => {
                const result = client.matchProjectFromRuntimeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.runtimePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRuntimeName', () => {
                const result = client.matchLocationFromRuntimeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.runtimePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRuntimeFromRuntimeName', () => {
                const result = client.matchRuntimeFromRuntimeName(fakePath);
                assert.strictEqual(result, "runtimeValue");
                assert((client.pathTemplates.runtimePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('schedule', () => {
            const fakePath = "/rendered/path/schedule";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                schedule: "scheduleValue",
            };
            const client = new notebookserviceModule.v1.NotebookServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.schedulePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.schedulePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('schedulePath', () => {
                const result = client.schedulePath("projectValue", "locationValue", "scheduleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.schedulePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromScheduleName', () => {
                const result = client.matchProjectFromScheduleName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.schedulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromScheduleName', () => {
                const result = client.matchLocationFromScheduleName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.schedulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchScheduleFromScheduleName', () => {
                const result = client.matchScheduleFromScheduleName(fakePath);
                assert.strictEqual(result, "scheduleValue");
                assert((client.pathTemplates.schedulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
