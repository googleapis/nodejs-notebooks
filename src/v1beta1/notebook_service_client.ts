// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './notebook_service_client_config.json';
import {operationsProtos} from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  API v1beta1 service for Cloud AI Platform Notebooks.
 * @class
 * @memberof v1beta1
 */
export class NotebookServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  notebookServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of NotebookServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof NotebookServiceClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the NotebookServiceClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof NotebookServiceClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      environmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/environments/{environment}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listInstances: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'instances'
      ),
      listEnvironments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'environments'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const createInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const createInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const registerInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const registerInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const setInstanceAcceleratorResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const setInstanceAcceleratorMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const setInstanceMachineTypeResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const setInstanceMachineTypeMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const setInstanceLabelsResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const setInstanceLabelsMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteInstanceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const startInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const startInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const stopInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const stopInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const resetInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const resetInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const reportInstanceInfoResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const reportInstanceInfoMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const upgradeInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const upgradeInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const upgradeInstanceInternalResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Instance'
    ) as gax.protobuf.Type;
    const upgradeInstanceInternalMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createEnvironmentResponse = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.Environment'
    ) as gax.protobuf.Type;
    const createEnvironmentMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteEnvironmentResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteEnvironmentMetadata = protoFilesRoot.lookup(
      '.google.cloud.notebooks.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createInstanceResponse.decode.bind(createInstanceResponse),
        createInstanceMetadata.decode.bind(createInstanceMetadata)
      ),
      registerInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        registerInstanceResponse.decode.bind(registerInstanceResponse),
        registerInstanceMetadata.decode.bind(registerInstanceMetadata)
      ),
      setInstanceAccelerator: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        setInstanceAcceleratorResponse.decode.bind(
          setInstanceAcceleratorResponse
        ),
        setInstanceAcceleratorMetadata.decode.bind(
          setInstanceAcceleratorMetadata
        )
      ),
      setInstanceMachineType: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        setInstanceMachineTypeResponse.decode.bind(
          setInstanceMachineTypeResponse
        ),
        setInstanceMachineTypeMetadata.decode.bind(
          setInstanceMachineTypeMetadata
        )
      ),
      setInstanceLabels: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        setInstanceLabelsResponse.decode.bind(setInstanceLabelsResponse),
        setInstanceLabelsMetadata.decode.bind(setInstanceLabelsMetadata)
      ),
      deleteInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteInstanceResponse.decode.bind(deleteInstanceResponse),
        deleteInstanceMetadata.decode.bind(deleteInstanceMetadata)
      ),
      startInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        startInstanceResponse.decode.bind(startInstanceResponse),
        startInstanceMetadata.decode.bind(startInstanceMetadata)
      ),
      stopInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        stopInstanceResponse.decode.bind(stopInstanceResponse),
        stopInstanceMetadata.decode.bind(stopInstanceMetadata)
      ),
      resetInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        resetInstanceResponse.decode.bind(resetInstanceResponse),
        resetInstanceMetadata.decode.bind(resetInstanceMetadata)
      ),
      reportInstanceInfo: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        reportInstanceInfoResponse.decode.bind(reportInstanceInfoResponse),
        reportInstanceInfoMetadata.decode.bind(reportInstanceInfoMetadata)
      ),
      upgradeInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        upgradeInstanceResponse.decode.bind(upgradeInstanceResponse),
        upgradeInstanceMetadata.decode.bind(upgradeInstanceMetadata)
      ),
      upgradeInstanceInternal: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        upgradeInstanceInternalResponse.decode.bind(
          upgradeInstanceInternalResponse
        ),
        upgradeInstanceInternalMetadata.decode.bind(
          upgradeInstanceInternalMetadata
        )
      ),
      createEnvironment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEnvironmentResponse.decode.bind(createEnvironmentResponse),
        createEnvironmentMetadata.decode.bind(createEnvironmentMetadata)
      ),
      deleteEnvironment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteEnvironmentResponse.decode.bind(deleteEnvironmentResponse),
        deleteEnvironmentMetadata.decode.bind(deleteEnvironmentMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.notebooks.v1beta1.NotebookService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.notebookServiceStub) {
      return this.notebookServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.notebooks.v1beta1.NotebookService.
    this.notebookServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.notebooks.v1beta1.NotebookService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.notebooks.v1beta1.NotebookService,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const notebookServiceStubMethods = [
      'listInstances',
      'getInstance',
      'createInstance',
      'registerInstance',
      'setInstanceAccelerator',
      'setInstanceMachineType',
      'setInstanceLabels',
      'deleteInstance',
      'startInstance',
      'stopInstance',
      'resetInstance',
      'reportInstanceInfo',
      'isInstanceUpgradeable',
      'upgradeInstance',
      'upgradeInstanceInternal',
      'listEnvironments',
      'getEnvironment',
      'createEnvironment',
      'deleteEnvironment',
    ];
    for (const methodName of notebookServiceStubMethods) {
      const callPromise = this.notebookServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.notebookServiceStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'notebooks.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'notebooks.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getInstance(
    request: protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IInstance,
      protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest | undefined,
      {} | undefined
    ]
  >;
  getInstance(
    request: protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.notebooks.v1beta1.IInstance,
      | protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInstance(
    request: protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest,
    callback: Callback<
      protos.google.cloud.notebooks.v1beta1.IInstance,
      | protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets details of a single Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Instance]{@link google.cloud.notebooks.v1beta1.Instance}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getInstance(
    request: protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.notebooks.v1beta1.IInstance,
          | protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.notebooks.v1beta1.IInstance,
      | protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IInstance,
      protos.google.cloud.notebooks.v1beta1.IGetInstanceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getInstance(request, options, callback);
  }
  isInstanceUpgradeable(
    request: protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableResponse,
      (
        | protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  isInstanceUpgradeable(
    request: protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableResponse,
      | protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  isInstanceUpgradeable(
    request: protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest,
    callback: Callback<
      protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableResponse,
      | protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Check if a notebook instance is upgradable.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.notebookInstance
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IsInstanceUpgradeableResponse]{@link google.cloud.notebooks.v1beta1.IsInstanceUpgradeableResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  isInstanceUpgradeable(
    request: protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableResponse,
          | protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableResponse,
      | protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableResponse,
      (
        | protos.google.cloud.notebooks.v1beta1.IIsInstanceUpgradeableRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      notebook_instance: request.notebookInstance || '',
    });
    this.initialize();
    return this.innerApiCalls.isInstanceUpgradeable(request, options, callback);
  }
  getEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IEnvironment,
      protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest | undefined,
      {} | undefined
    ]
  >;
  getEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.notebooks.v1beta1.IEnvironment,
      | protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest,
    callback: Callback<
      protos.google.cloud.notebooks.v1beta1.IEnvironment,
      | protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets details of a single Environment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/environments/{environment_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Environment]{@link google.cloud.notebooks.v1beta1.Environment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.notebooks.v1beta1.IEnvironment,
          | protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.notebooks.v1beta1.IEnvironment,
      | protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IEnvironment,
      protos.google.cloud.notebooks.v1beta1.IGetEnvironmentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getEnvironment(request, options, callback);
  }

  createInstance(
    request: protos.google.cloud.notebooks.v1beta1.ICreateInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createInstance(
    request: protos.google.cloud.notebooks.v1beta1.ICreateInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInstance(
    request: protos.google.cloud.notebooks.v1beta1.ICreateInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a new Instance in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format:
   *   `parent=projects/{project_id}/locations/{location}`
   * @param {string} request.instanceId
   *   Required. User-defined unique ID of this instance.
   * @param {google.cloud.notebooks.v1beta1.Instance} request.instance
   *   Required. The instance to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createInstance(
    request: protos.google.cloud.notebooks.v1beta1.ICreateInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the createInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  registerInstance(
    request: protos.google.cloud.notebooks.v1beta1.IRegisterInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  registerInstance(
    request: protos.google.cloud.notebooks.v1beta1.IRegisterInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  registerInstance(
    request: protos.google.cloud.notebooks.v1beta1.IRegisterInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Registers an existing legacy notebook instance to the Notebooks API server.
   * Legacy instances are instances created with the legacy Compute Engine
   * calls. They are not manageable by the Notebooks API out of the box. This
   * call makes these instances manageable by the Notebooks API.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format:
   *   `parent=projects/{project_id}/locations/{location}`
   * @param {string} request.instanceId
   *   Required. User defined unique ID of this instance. The `instance_id` must
   *   be 1 to 63 characters long and contain only lowercase letters,
   *   numeric characters, and dashes. The first character must be a lowercase
   *   letter and the last character cannot be a dash.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  registerInstance(
    request: protos.google.cloud.notebooks.v1beta1.IRegisterInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.registerInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the registerInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkRegisterInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkRegisterInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.registerInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  setInstanceAccelerator(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceAcceleratorRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  setInstanceAccelerator(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceAcceleratorRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  setInstanceAccelerator(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceAcceleratorRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates the guest accelerators of a single Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {google.cloud.notebooks.v1beta1.Instance.AcceleratorType} request.type
   *   Required. Type of this accelerator.
   * @param {number} request.coreCount
   *   Required. Count of cores of this accelerator. Note that not all combinations
   *   of `type` and `core_count` are valid. Check [GPUs on
   *   Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to
   *   find a valid combination. TPUs are not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setInstanceAccelerator(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceAcceleratorRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.setInstanceAccelerator(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the setInstanceAccelerator() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkSetInstanceAcceleratorProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkSetInstanceAcceleratorProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.setInstanceAccelerator,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  setInstanceMachineType(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceMachineTypeRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  setInstanceMachineType(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceMachineTypeRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  setInstanceMachineType(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceMachineTypeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates the machine type of a single Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {string} request.machineType
   *   Required. The [Compute Engine machine
   *   type](https://cloud.google.com/compute/docs/machine-types).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setInstanceMachineType(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceMachineTypeRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.setInstanceMachineType(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the setInstanceMachineType() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkSetInstanceMachineTypeProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkSetInstanceMachineTypeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.setInstanceMachineType,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  setInstanceLabels(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceLabelsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  setInstanceLabels(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceLabelsRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  setInstanceLabels(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceLabelsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates the labels of an Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {number[]} request.labels
   *   Labels to apply to this instance.
   *   These can be later modified by the setLabels method
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setInstanceLabels(
    request: protos.google.cloud.notebooks.v1beta1.ISetInstanceLabelsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.setInstanceLabels(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the setInstanceLabels() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkSetInstanceLabelsProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkSetInstanceLabelsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.setInstanceLabels,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  deleteInstance(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteInstance(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInstance(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a single Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteInstance(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the deleteInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkDeleteInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkDeleteInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.deleteInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  startInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStartInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  startInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStartInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  startInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStartInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Starts a notebook instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  startInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStartInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.startInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the startInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkStartInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkStartInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.startInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  stopInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStopInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  stopInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStopInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStopInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Stops a notebook instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  stopInstance(
    request: protos.google.cloud.notebooks.v1beta1.IStopInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.stopInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the stopInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkStopInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkStopInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.stopInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  resetInstance(
    request: protos.google.cloud.notebooks.v1beta1.IResetInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  resetInstance(
    request: protos.google.cloud.notebooks.v1beta1.IResetInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  resetInstance(
    request: protos.google.cloud.notebooks.v1beta1.IResetInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Resets a notebook instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  resetInstance(
    request: protos.google.cloud.notebooks.v1beta1.IResetInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.resetInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the resetInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkResetInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkResetInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.resetInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  reportInstanceInfo(
    request: protos.google.cloud.notebooks.v1beta1.IReportInstanceInfoRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  reportInstanceInfo(
    request: protos.google.cloud.notebooks.v1beta1.IReportInstanceInfoRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  reportInstanceInfo(
    request: protos.google.cloud.notebooks.v1beta1.IReportInstanceInfoRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Allows notebook instances to
   * report their latest instance information to the Notebooks
   * API server. The server will merge the reported information to
   * the instance metadata store. Do not use this method directly.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {string} request.vmId
   *   Required. The VM hardware token for authenticating the VM.
   *   https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   * @param {number[]} request.metadata
   *   The metadata reported to Notebooks API. This will be merged to the instance
   *   metadata store
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  reportInstanceInfo(
    request: protos.google.cloud.notebooks.v1beta1.IReportInstanceInfoRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.reportInstanceInfo(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the reportInstanceInfo() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkReportInstanceInfoProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkReportInstanceInfoProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.reportInstanceInfo,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  upgradeInstance(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  upgradeInstance(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  upgradeInstance(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Upgrades a notebook instance to the latest version.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  upgradeInstance(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.upgradeInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the upgradeInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkUpgradeInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkUpgradeInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.upgradeInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  upgradeInstanceInternal(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceInternalRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  upgradeInstanceInternal(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceInternalRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  upgradeInstanceInternal(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceInternalRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Allows notebook instances to
   * call this endpoint to upgrade themselves. Do not use this method directly.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
   * @param {string} request.vmId
   *   Required. The VM hardware token for authenticating the VM.
   *   https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  upgradeInstanceInternal(
    request: protos.google.cloud.notebooks.v1beta1.IUpgradeInstanceInternalRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IInstance,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IInstance,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.upgradeInstanceInternal(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by the upgradeInstanceInternal() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkUpgradeInstanceInternalProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkUpgradeInstanceInternalProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.upgradeInstanceInternal,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Instance,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  createEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.ICreateEnvironmentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IEnvironment,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.ICreateEnvironmentRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IEnvironment,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.ICreateEnvironmentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IEnvironment,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a new Environment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: `projects/{project_id}/locations/{location}`
   * @param {string} request.environmentId
   *   Required. User-defined unique ID of this environment. The `environment_id` must
   *   be 1 to 63 characters long and contain only lowercase letters,
   *   numeric characters, and dashes. The first character must be a lowercase
   *   letter and the last character cannot be a dash.
   * @param {google.cloud.notebooks.v1beta1.Environment} request.environment
   *   Required. The environment to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.ICreateEnvironmentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.notebooks.v1beta1.IEnvironment,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IEnvironment,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.notebooks.v1beta1.IEnvironment,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createEnvironment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the createEnvironment() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateEnvironmentProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateEnvironmentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.notebooks.v1beta1.Environment,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createEnvironment,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.notebooks.v1beta1.Environment,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  deleteEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteEnvironmentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteEnvironmentRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteEnvironmentRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a single Environment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Format:
   *   `projects/{project_id}/locations/{location}/environments/{environment_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteEnvironment(
    request: protos.google.cloud.notebooks.v1beta1.IDeleteEnvironmentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.notebooks.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.notebooks.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteEnvironment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the deleteEnvironment() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkDeleteEnvironmentProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkDeleteEnvironmentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.deleteEnvironment,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.notebooks.v1beta1.OperationMetadata
    >;
  }
  listInstances(
    request: protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IInstance[],
      protos.google.cloud.notebooks.v1beta1.IListInstancesRequest | null,
      protos.google.cloud.notebooks.v1beta1.IListInstancesResponse
    ]
  >;
  listInstances(
    request: protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
      | protos.google.cloud.notebooks.v1beta1.IListInstancesResponse
      | null
      | undefined,
      protos.google.cloud.notebooks.v1beta1.IInstance
    >
  ): void;
  listInstances(
    request: protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
    callback: PaginationCallback<
      protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
      | protos.google.cloud.notebooks.v1beta1.IListInstancesResponse
      | null
      | undefined,
      protos.google.cloud.notebooks.v1beta1.IInstance
    >
  ): void;
  /**
   * Lists instances in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format:
   *   `parent=projects/{project_id}/locations/{location}`
   * @param {number} request.pageSize
   *   Maximum return size of the list call.
   * @param {string} request.pageToken
   *   A previous returned page token that can be used to continue listing
   *   from the last result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Instance]{@link google.cloud.notebooks.v1beta1.Instance}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Instance]{@link google.cloud.notebooks.v1beta1.Instance} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListInstancesRequest]{@link google.cloud.notebooks.v1beta1.ListInstancesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListInstancesResponse]{@link google.cloud.notebooks.v1beta1.ListInstancesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listInstances(
    request: protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
          | protos.google.cloud.notebooks.v1beta1.IListInstancesResponse
          | null
          | undefined,
          protos.google.cloud.notebooks.v1beta1.IInstance
        >,
    callback?: PaginationCallback<
      protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
      | protos.google.cloud.notebooks.v1beta1.IListInstancesResponse
      | null
      | undefined,
      protos.google.cloud.notebooks.v1beta1.IInstance
    >
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IInstance[],
      protos.google.cloud.notebooks.v1beta1.IListInstancesRequest | null,
      protos.google.cloud.notebooks.v1beta1.IListInstancesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listInstances(request, options, callback);
  }

  /**
   * Equivalent to {@link listInstances}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listInstances} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format:
   *   `parent=projects/{project_id}/locations/{location}`
   * @param {number} request.pageSize
   *   Maximum return size of the list call.
   * @param {string} request.pageToken
   *   A previous returned page token that can be used to continue listing
   *   from the last result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Instance]{@link google.cloud.notebooks.v1beta1.Instance} on 'data' event.
   */
  listInstancesStream(
    request?: protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInstances.createStream(
      this.innerApiCalls.listInstances as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listInstances}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format:
   *   `parent=projects/{project_id}/locations/{location}`
   * @param {number} request.pageSize
   *   Maximum return size of the list call.
   * @param {string} request.pageToken
   *   A previous returned page token that can be used to continue listing
   *   from the last result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listInstancesAsync(
    request?: protos.google.cloud.notebooks.v1beta1.IListInstancesRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.notebooks.v1beta1.IInstance> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInstances.asyncIterate(
      this.innerApiCalls['listInstances'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.notebooks.v1beta1.IInstance>;
  }
  listEnvironments(
    request: protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IEnvironment[],
      protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest | null,
      protos.google.cloud.notebooks.v1beta1.IListEnvironmentsResponse
    ]
  >;
  listEnvironments(
    request: protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
      | protos.google.cloud.notebooks.v1beta1.IListEnvironmentsResponse
      | null
      | undefined,
      protos.google.cloud.notebooks.v1beta1.IEnvironment
    >
  ): void;
  listEnvironments(
    request: protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
      | protos.google.cloud.notebooks.v1beta1.IListEnvironmentsResponse
      | null
      | undefined,
      protos.google.cloud.notebooks.v1beta1.IEnvironment
    >
  ): void;
  /**
   * Lists environments in a project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: `projects/{project_id}/locations/{location}`
   * @param {number} request.pageSize
   *   Maximum return size of the list call.
   * @param {string} request.pageToken
   *   A previous returned page token that can be used to continue listing from
   *   the last result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Environment]{@link google.cloud.notebooks.v1beta1.Environment}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Environment]{@link google.cloud.notebooks.v1beta1.Environment} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListEnvironmentsRequest]{@link google.cloud.notebooks.v1beta1.ListEnvironmentsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListEnvironmentsResponse]{@link google.cloud.notebooks.v1beta1.ListEnvironmentsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listEnvironments(
    request: protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
          | protos.google.cloud.notebooks.v1beta1.IListEnvironmentsResponse
          | null
          | undefined,
          protos.google.cloud.notebooks.v1beta1.IEnvironment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
      | protos.google.cloud.notebooks.v1beta1.IListEnvironmentsResponse
      | null
      | undefined,
      protos.google.cloud.notebooks.v1beta1.IEnvironment
    >
  ): Promise<
    [
      protos.google.cloud.notebooks.v1beta1.IEnvironment[],
      protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest | null,
      protos.google.cloud.notebooks.v1beta1.IListEnvironmentsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listEnvironments(request, options, callback);
  }

  /**
   * Equivalent to {@link listEnvironments}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listEnvironments} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: `projects/{project_id}/locations/{location}`
   * @param {number} request.pageSize
   *   Maximum return size of the list call.
   * @param {string} request.pageToken
   *   A previous returned page token that can be used to continue listing from
   *   the last result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Environment]{@link google.cloud.notebooks.v1beta1.Environment} on 'data' event.
   */
  listEnvironmentsStream(
    request?: protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listEnvironments.createStream(
      this.innerApiCalls.listEnvironments as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listEnvironments}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Format: `projects/{project_id}/locations/{location}`
   * @param {number} request.pageSize
   *   Maximum return size of the list call.
   * @param {string} request.pageToken
   *   A previous returned page token that can be used to continue listing from
   *   the last result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listEnvironmentsAsync(
    request?: protos.google.cloud.notebooks.v1beta1.IListEnvironmentsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.notebooks.v1beta1.IEnvironment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listEnvironments.asyncIterate(
      this.innerApiCalls['listEnvironments'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.notebooks.v1beta1.IEnvironment>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified environment resource name string.
   *
   * @param {string} project
   * @param {string} environment
   * @returns {string} Resource name string.
   */
  environmentPath(project: string, environment: string) {
    return this.pathTemplates.environmentPathTemplate.render({
      project: project,
      environment: environment,
    });
  }

  /**
   * Parse the project from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .project;
  }

  /**
   * Parse the environment from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .environment;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project: string, instance: string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.notebookServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
